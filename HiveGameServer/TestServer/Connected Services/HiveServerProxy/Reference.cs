//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TestServer.HiveServerProxy {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="HiveServerProxy.IUserManager")]
    public interface IUserManager {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/AddUser", ReplyAction="http://tempuri.org/IUserManager/AddUserResponse")]
        int AddUser(HiveGameService.Contracts.Profile profile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/AddUser", ReplyAction="http://tempuri.org/IUserManager/AddUserResponse")]
        System.Threading.Tasks.Task<int> AddUserAsync(HiveGameService.Contracts.Profile profile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/GetUserProfileByUsername", ReplyAction="http://tempuri.org/IUserManager/GetUserProfileByUsernameResponse")]
        HiveGameService.Contracts.Profile GetUserProfileByUsername(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/GetUserProfileByUsername", ReplyAction="http://tempuri.org/IUserManager/GetUserProfileByUsernameResponse")]
        System.Threading.Tasks.Task<HiveGameService.Contracts.Profile> GetUserProfileByUsernameAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/GetUserProfile", ReplyAction="http://tempuri.org/IUserManager/GetUserProfileResponse")]
        HiveGameService.Contracts.Profile GetUserProfile(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/GetUserProfile", ReplyAction="http://tempuri.org/IUserManager/GetUserProfileResponse")]
        System.Threading.Tasks.Task<HiveGameService.Contracts.Profile> GetUserProfileAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/UpdateLoginCredentials", ReplyAction="http://tempuri.org/IUserManager/UpdateLoginCredentialsResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(HiveGameService.Contracts.Profile))]
        int UpdateLoginCredentials(HiveGameService.Contracts.AccessAccount profile, HiveGameService.Contracts.AccessAccount updatedProfile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/UpdateLoginCredentials", ReplyAction="http://tempuri.org/IUserManager/UpdateLoginCredentialsResponse")]
        System.Threading.Tasks.Task<int> UpdateLoginCredentialsAsync(HiveGameService.Contracts.AccessAccount profile, HiveGameService.Contracts.AccessAccount updatedProfile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/UpdateProfile", ReplyAction="http://tempuri.org/IUserManager/UpdateProfileResponse")]
        int UpdateProfile(HiveGameService.Contracts.Profile profile, string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/UpdateProfile", ReplyAction="http://tempuri.org/IUserManager/UpdateProfileResponse")]
        System.Threading.Tasks.Task<int> UpdateProfileAsync(HiveGameService.Contracts.Profile profile, string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/VerifyExistingAccesAccount", ReplyAction="http://tempuri.org/IUserManager/VerifyExistingAccesAccountResponse")]
        int VerifyExistingAccesAccount(string email, string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/VerifyExistingAccesAccount", ReplyAction="http://tempuri.org/IUserManager/VerifyExistingAccesAccountResponse")]
        System.Threading.Tasks.Task<int> VerifyExistingAccesAccountAsync(string email, string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/VerifyCredentials", ReplyAction="http://tempuri.org/IUserManager/VerifyCredentialsResponse")]
        int VerifyCredentials(string username, string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/VerifyCredentials", ReplyAction="http://tempuri.org/IUserManager/VerifyCredentialsResponse")]
        System.Threading.Tasks.Task<int> VerifyCredentialsAsync(string username, string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/VerifyPasswordCredentials", ReplyAction="http://tempuri.org/IUserManager/VerifyPasswordCredentialsResponse")]
        int VerifyPasswordCredentials(string email, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/VerifyPasswordCredentials", ReplyAction="http://tempuri.org/IUserManager/VerifyPasswordCredentialsResponse")]
        System.Threading.Tasks.Task<int> VerifyPasswordCredentialsAsync(string email, string password);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IUserManagerChannel : TestServer.HiveServerProxy.IUserManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UserManagerClient : System.ServiceModel.ClientBase<TestServer.HiveServerProxy.IUserManager>, TestServer.HiveServerProxy.IUserManager {
        
        public UserManagerClient() {
        }
        
        public UserManagerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public UserManagerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserManagerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserManagerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int AddUser(HiveGameService.Contracts.Profile profile) {
            return base.Channel.AddUser(profile);
        }
        
        public System.Threading.Tasks.Task<int> AddUserAsync(HiveGameService.Contracts.Profile profile) {
            return base.Channel.AddUserAsync(profile);
        }
        
        public HiveGameService.Contracts.Profile GetUserProfileByUsername(string username) {
            return base.Channel.GetUserProfileByUsername(username);
        }
        
        public System.Threading.Tasks.Task<HiveGameService.Contracts.Profile> GetUserProfileByUsernameAsync(string username) {
            return base.Channel.GetUserProfileByUsernameAsync(username);
        }
        
        public HiveGameService.Contracts.Profile GetUserProfile(string username, string password) {
            return base.Channel.GetUserProfile(username, password);
        }
        
        public System.Threading.Tasks.Task<HiveGameService.Contracts.Profile> GetUserProfileAsync(string username, string password) {
            return base.Channel.GetUserProfileAsync(username, password);
        }
        
        public int UpdateLoginCredentials(HiveGameService.Contracts.AccessAccount profile, HiveGameService.Contracts.AccessAccount updatedProfile) {
            return base.Channel.UpdateLoginCredentials(profile, updatedProfile);
        }
        
        public System.Threading.Tasks.Task<int> UpdateLoginCredentialsAsync(HiveGameService.Contracts.AccessAccount profile, HiveGameService.Contracts.AccessAccount updatedProfile) {
            return base.Channel.UpdateLoginCredentialsAsync(profile, updatedProfile);
        }
        
        public int UpdateProfile(HiveGameService.Contracts.Profile profile, string email) {
            return base.Channel.UpdateProfile(profile, email);
        }
        
        public System.Threading.Tasks.Task<int> UpdateProfileAsync(HiveGameService.Contracts.Profile profile, string email) {
            return base.Channel.UpdateProfileAsync(profile, email);
        }
        
        public int VerifyExistingAccesAccount(string email, string username) {
            return base.Channel.VerifyExistingAccesAccount(email, username);
        }
        
        public System.Threading.Tasks.Task<int> VerifyExistingAccesAccountAsync(string email, string username) {
            return base.Channel.VerifyExistingAccesAccountAsync(email, username);
        }
        
        public int VerifyCredentials(string username, string email) {
            return base.Channel.VerifyCredentials(username, email);
        }
        
        public System.Threading.Tasks.Task<int> VerifyCredentialsAsync(string username, string email) {
            return base.Channel.VerifyCredentialsAsync(username, email);
        }
        
        public int VerifyPasswordCredentials(string email, string password) {
            return base.Channel.VerifyPasswordCredentials(email, password);
        }
        
        public System.Threading.Tasks.Task<int> VerifyPasswordCredentialsAsync(string email, string password) {
            return base.Channel.VerifyPasswordCredentialsAsync(email, password);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="HiveServerProxy.IFriendshipManager")]
    public interface IFriendshipManager {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendshipManager/DeleteFriend", ReplyAction="http://tempuri.org/IFriendshipManager/DeleteFriendResponse")]
        int DeleteFriend(HiveGameService.Contracts.Profile removingPlayer, HiveGameService.Contracts.Profile friendToRemove);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendshipManager/DeleteFriend", ReplyAction="http://tempuri.org/IFriendshipManager/DeleteFriendResponse")]
        System.Threading.Tasks.Task<int> DeleteFriendAsync(HiveGameService.Contracts.Profile removingPlayer, HiveGameService.Contracts.Profile friendToRemove);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendshipManager/GetAllFriends", ReplyAction="http://tempuri.org/IFriendshipManager/GetAllFriendsResponse")]
        HiveGameService.Contracts.Profile[] GetAllFriends(HiveGameService.Contracts.Profile player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendshipManager/GetAllFriends", ReplyAction="http://tempuri.org/IFriendshipManager/GetAllFriendsResponse")]
        System.Threading.Tasks.Task<HiveGameService.Contracts.Profile[]> GetAllFriendsAsync(HiveGameService.Contracts.Profile player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendshipManager/GetFriendByUsername", ReplyAction="http://tempuri.org/IFriendshipManager/GetFriendByUsernameResponse")]
        HiveGameService.Contracts.Profile GetFriendByUsername(HiveGameService.Contracts.Profile player, string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendshipManager/GetFriendByUsername", ReplyAction="http://tempuri.org/IFriendshipManager/GetFriendByUsernameResponse")]
        System.Threading.Tasks.Task<HiveGameService.Contracts.Profile> GetFriendByUsernameAsync(HiveGameService.Contracts.Profile player, string username);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFriendshipManagerChannel : TestServer.HiveServerProxy.IFriendshipManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FriendshipManagerClient : System.ServiceModel.ClientBase<TestServer.HiveServerProxy.IFriendshipManager>, TestServer.HiveServerProxy.IFriendshipManager {
        
        public FriendshipManagerClient() {
        }
        
        public FriendshipManagerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public FriendshipManagerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FriendshipManagerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FriendshipManagerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int DeleteFriend(HiveGameService.Contracts.Profile removingPlayer, HiveGameService.Contracts.Profile friendToRemove) {
            return base.Channel.DeleteFriend(removingPlayer, friendToRemove);
        }
        
        public System.Threading.Tasks.Task<int> DeleteFriendAsync(HiveGameService.Contracts.Profile removingPlayer, HiveGameService.Contracts.Profile friendToRemove) {
            return base.Channel.DeleteFriendAsync(removingPlayer, friendToRemove);
        }
        
        public HiveGameService.Contracts.Profile[] GetAllFriends(HiveGameService.Contracts.Profile player) {
            return base.Channel.GetAllFriends(player);
        }
        
        public System.Threading.Tasks.Task<HiveGameService.Contracts.Profile[]> GetAllFriendsAsync(HiveGameService.Contracts.Profile player) {
            return base.Channel.GetAllFriendsAsync(player);
        }
        
        public HiveGameService.Contracts.Profile GetFriendByUsername(HiveGameService.Contracts.Profile player, string username) {
            return base.Channel.GetFriendByUsername(player, username);
        }
        
        public System.Threading.Tasks.Task<HiveGameService.Contracts.Profile> GetFriendByUsernameAsync(HiveGameService.Contracts.Profile player, string username) {
            return base.Channel.GetFriendByUsernameAsync(player, username);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="HiveServerProxy.IFriendRequestManager")]
    public interface IFriendRequestManager {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendRequestManager/CreateFriendRequest", ReplyAction="http://tempuri.org/IFriendRequestManager/CreateFriendRequestResponse")]
        int CreateFriendRequest(HiveGameService.Contracts.Profile playerOne, HiveGameService.Contracts.Profile playerTwo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendRequestManager/CreateFriendRequest", ReplyAction="http://tempuri.org/IFriendRequestManager/CreateFriendRequestResponse")]
        System.Threading.Tasks.Task<int> CreateFriendRequestAsync(HiveGameService.Contracts.Profile playerOne, HiveGameService.Contracts.Profile playerTwo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendRequestManager/GetFriendRequests", ReplyAction="http://tempuri.org/IFriendRequestManager/GetFriendRequestsResponse")]
        HiveGameService.Contracts.Profile[] GetFriendRequests(HiveGameService.Contracts.Profile player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendRequestManager/GetFriendRequests", ReplyAction="http://tempuri.org/IFriendRequestManager/GetFriendRequestsResponse")]
        System.Threading.Tasks.Task<HiveGameService.Contracts.Profile[]> GetFriendRequestsAsync(HiveGameService.Contracts.Profile player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendRequestManager/AcceptFriendRequest", ReplyAction="http://tempuri.org/IFriendRequestManager/AcceptFriendRequestResponse")]
        int AcceptFriendRequest(HiveGameService.Contracts.Profile playerOne, HiveGameService.Contracts.Profile playerTwo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendRequestManager/AcceptFriendRequest", ReplyAction="http://tempuri.org/IFriendRequestManager/AcceptFriendRequestResponse")]
        System.Threading.Tasks.Task<int> AcceptFriendRequestAsync(HiveGameService.Contracts.Profile playerOne, HiveGameService.Contracts.Profile playerTwo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendRequestManager/DeclineFriendRequest", ReplyAction="http://tempuri.org/IFriendRequestManager/DeclineFriendRequestResponse")]
        int DeclineFriendRequest(HiveGameService.Contracts.Profile playerOne, HiveGameService.Contracts.Profile playerTwo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendRequestManager/DeclineFriendRequest", ReplyAction="http://tempuri.org/IFriendRequestManager/DeclineFriendRequestResponse")]
        System.Threading.Tasks.Task<int> DeclineFriendRequestAsync(HiveGameService.Contracts.Profile playerOne, HiveGameService.Contracts.Profile playerTwo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendRequestManager/VerifyFriendRequestRegistered", ReplyAction="http://tempuri.org/IFriendRequestManager/VerifyFriendRequestRegisteredResponse")]
        int VerifyFriendRequestRegistered(HiveGameService.Contracts.Profile playerOne, HiveGameService.Contracts.Profile playerTwo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendRequestManager/VerifyFriendRequestRegistered", ReplyAction="http://tempuri.org/IFriendRequestManager/VerifyFriendRequestRegisteredResponse")]
        System.Threading.Tasks.Task<int> VerifyFriendRequestRegisteredAsync(HiveGameService.Contracts.Profile playerOne, HiveGameService.Contracts.Profile playerTwo);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFriendRequestManagerChannel : TestServer.HiveServerProxy.IFriendRequestManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FriendRequestManagerClient : System.ServiceModel.ClientBase<TestServer.HiveServerProxy.IFriendRequestManager>, TestServer.HiveServerProxy.IFriendRequestManager {
        
        public FriendRequestManagerClient() {
        }
        
        public FriendRequestManagerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public FriendRequestManagerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FriendRequestManagerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FriendRequestManagerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int CreateFriendRequest(HiveGameService.Contracts.Profile playerOne, HiveGameService.Contracts.Profile playerTwo) {
            return base.Channel.CreateFriendRequest(playerOne, playerTwo);
        }
        
        public System.Threading.Tasks.Task<int> CreateFriendRequestAsync(HiveGameService.Contracts.Profile playerOne, HiveGameService.Contracts.Profile playerTwo) {
            return base.Channel.CreateFriendRequestAsync(playerOne, playerTwo);
        }
        
        public HiveGameService.Contracts.Profile[] GetFriendRequests(HiveGameService.Contracts.Profile player) {
            return base.Channel.GetFriendRequests(player);
        }
        
        public System.Threading.Tasks.Task<HiveGameService.Contracts.Profile[]> GetFriendRequestsAsync(HiveGameService.Contracts.Profile player) {
            return base.Channel.GetFriendRequestsAsync(player);
        }
        
        public int AcceptFriendRequest(HiveGameService.Contracts.Profile playerOne, HiveGameService.Contracts.Profile playerTwo) {
            return base.Channel.AcceptFriendRequest(playerOne, playerTwo);
        }
        
        public System.Threading.Tasks.Task<int> AcceptFriendRequestAsync(HiveGameService.Contracts.Profile playerOne, HiveGameService.Contracts.Profile playerTwo) {
            return base.Channel.AcceptFriendRequestAsync(playerOne, playerTwo);
        }
        
        public int DeclineFriendRequest(HiveGameService.Contracts.Profile playerOne, HiveGameService.Contracts.Profile playerTwo) {
            return base.Channel.DeclineFriendRequest(playerOne, playerTwo);
        }
        
        public System.Threading.Tasks.Task<int> DeclineFriendRequestAsync(HiveGameService.Contracts.Profile playerOne, HiveGameService.Contracts.Profile playerTwo) {
            return base.Channel.DeclineFriendRequestAsync(playerOne, playerTwo);
        }
        
        public int VerifyFriendRequestRegistered(HiveGameService.Contracts.Profile playerOne, HiveGameService.Contracts.Profile playerTwo) {
            return base.Channel.VerifyFriendRequestRegistered(playerOne, playerTwo);
        }
        
        public System.Threading.Tasks.Task<int> VerifyFriendRequestRegisteredAsync(HiveGameService.Contracts.Profile playerOne, HiveGameService.Contracts.Profile playerTwo) {
            return base.Channel.VerifyFriendRequestRegisteredAsync(playerOne, playerTwo);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="HiveServerProxy.IChatManager", CallbackContract=typeof(TestServer.HiveServerProxy.IChatManagerCallback))]
    public interface IChatManager {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatManager/ConnectToChatLobby")]
        void ConnectToChatLobby(HiveGameService.Contracts.Profile user, string code);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatManager/ConnectToChatLobby")]
        System.Threading.Tasks.Task ConnectToChatLobbyAsync(HiveGameService.Contracts.Profile user, string code);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatManager/SendMessages")]
        void SendMessages(HiveGameService.Contracts.Message message, string code);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatManager/SendMessages")]
        System.Threading.Tasks.Task SendMessagesAsync(HiveGameService.Contracts.Message message, string code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatManager/DisconectPlayerFromChat", ReplyAction="http://tempuri.org/IChatManager/DisconectPlayerFromChatResponse")]
        int DisconectPlayerFromChat(HiveGameService.Contracts.Profile user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatManager/DisconectPlayerFromChat", ReplyAction="http://tempuri.org/IChatManager/DisconectPlayerFromChatResponse")]
        System.Threading.Tasks.Task<int> DisconectPlayerFromChatAsync(HiveGameService.Contracts.Profile user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatManager/GetConnectedUsers", ReplyAction="http://tempuri.org/IChatManager/GetConnectedUsersResponse")]
        HiveGameService.Contracts.Profile[] GetConnectedUsers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatManager/GetConnectedUsers", ReplyAction="http://tempuri.org/IChatManager/GetConnectedUsersResponse")]
        System.Threading.Tasks.Task<HiveGameService.Contracts.Profile[]> GetConnectedUsersAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IChatManagerCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatManager/ReceiveMessage", ReplyAction="http://tempuri.org/IChatManager/ReceiveMessageResponse")]
        void ReceiveMessage(HiveGameService.Contracts.Message[] messages);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatManager/UserConnected", ReplyAction="http://tempuri.org/IChatManager/UserConnectedResponse")]
        void UserConnected(HiveGameService.Contracts.Profile[] users);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IChatManagerChannel : TestServer.HiveServerProxy.IChatManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ChatManagerClient : System.ServiceModel.DuplexClientBase<TestServer.HiveServerProxy.IChatManager>, TestServer.HiveServerProxy.IChatManager {
        
        public ChatManagerClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ChatManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ChatManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ChatManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ChatManagerClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void ConnectToChatLobby(HiveGameService.Contracts.Profile user, string code) {
            base.Channel.ConnectToChatLobby(user, code);
        }
        
        public System.Threading.Tasks.Task ConnectToChatLobbyAsync(HiveGameService.Contracts.Profile user, string code) {
            return base.Channel.ConnectToChatLobbyAsync(user, code);
        }
        
        public void SendMessages(HiveGameService.Contracts.Message message, string code) {
            base.Channel.SendMessages(message, code);
        }
        
        public System.Threading.Tasks.Task SendMessagesAsync(HiveGameService.Contracts.Message message, string code) {
            return base.Channel.SendMessagesAsync(message, code);
        }
        
        public int DisconectPlayerFromChat(HiveGameService.Contracts.Profile user) {
            return base.Channel.DisconectPlayerFromChat(user);
        }
        
        public System.Threading.Tasks.Task<int> DisconectPlayerFromChatAsync(HiveGameService.Contracts.Profile user) {
            return base.Channel.DisconectPlayerFromChatAsync(user);
        }
        
        public HiveGameService.Contracts.Profile[] GetConnectedUsers() {
            return base.Channel.GetConnectedUsers();
        }
        
        public System.Threading.Tasks.Task<HiveGameService.Contracts.Profile[]> GetConnectedUsersAsync() {
            return base.Channel.GetConnectedUsersAsync();
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="HiveServerProxy.ILeaderBoardManager")]
    public interface ILeaderBoardManager {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILeaderBoardManager/UpdateWinnerResultToPlayerLeaderBoard", ReplyAction="http://tempuri.org/ILeaderBoardManager/UpdateWinnerResultToPlayerLeaderBoardRespo" +
            "nse")]
        int UpdateWinnerResultToPlayerLeaderBoard(int idAccounr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILeaderBoardManager/UpdateWinnerResultToPlayerLeaderBoard", ReplyAction="http://tempuri.org/ILeaderBoardManager/UpdateWinnerResultToPlayerLeaderBoardRespo" +
            "nse")]
        System.Threading.Tasks.Task<int> UpdateWinnerResultToPlayerLeaderBoardAsync(int idAccounr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILeaderBoardManager/UpdateLoserResultToPlayerLeaderBoard", ReplyAction="http://tempuri.org/ILeaderBoardManager/UpdateLoserResultToPlayerLeaderBoardRespon" +
            "se")]
        int UpdateLoserResultToPlayerLeaderBoard(int idAccount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILeaderBoardManager/UpdateLoserResultToPlayerLeaderBoard", ReplyAction="http://tempuri.org/ILeaderBoardManager/UpdateLoserResultToPlayerLeaderBoardRespon" +
            "se")]
        System.Threading.Tasks.Task<int> UpdateLoserResultToPlayerLeaderBoardAsync(int idAccount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILeaderBoardManager/UpdateDrawResultToPlayerLeaderBoard", ReplyAction="http://tempuri.org/ILeaderBoardManager/UpdateDrawResultToPlayerLeaderBoardRespons" +
            "e")]
        int UpdateDrawResultToPlayerLeaderBoard(int idAccount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILeaderBoardManager/UpdateDrawResultToPlayerLeaderBoard", ReplyAction="http://tempuri.org/ILeaderBoardManager/UpdateDrawResultToPlayerLeaderBoardRespons" +
            "e")]
        System.Threading.Tasks.Task<int> UpdateDrawResultToPlayerLeaderBoardAsync(int idAccount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILeaderBoardManager/GetPersonalLeaderBoard", ReplyAction="http://tempuri.org/ILeaderBoardManager/GetPersonalLeaderBoardResponse")]
        HiveGameService.Contracts.LeaderBoardPlayer GetPersonalLeaderBoard(int idAccount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILeaderBoardManager/GetPersonalLeaderBoard", ReplyAction="http://tempuri.org/ILeaderBoardManager/GetPersonalLeaderBoardResponse")]
        System.Threading.Tasks.Task<HiveGameService.Contracts.LeaderBoardPlayer> GetPersonalLeaderBoardAsync(int idAccount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILeaderBoardManager/GetAllPlayersLeaderboards", ReplyAction="http://tempuri.org/ILeaderBoardManager/GetAllPlayersLeaderboardsResponse")]
        HiveGameService.Contracts.LeaderBoardPlayer[] GetAllPlayersLeaderboards();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILeaderBoardManager/GetAllPlayersLeaderboards", ReplyAction="http://tempuri.org/ILeaderBoardManager/GetAllPlayersLeaderboardsResponse")]
        System.Threading.Tasks.Task<HiveGameService.Contracts.LeaderBoardPlayer[]> GetAllPlayersLeaderboardsAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILeaderBoardManagerChannel : TestServer.HiveServerProxy.ILeaderBoardManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LeaderBoardManagerClient : System.ServiceModel.ClientBase<TestServer.HiveServerProxy.ILeaderBoardManager>, TestServer.HiveServerProxy.ILeaderBoardManager {
        
        public LeaderBoardManagerClient() {
        }
        
        public LeaderBoardManagerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public LeaderBoardManagerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LeaderBoardManagerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LeaderBoardManagerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int UpdateWinnerResultToPlayerLeaderBoard(int idAccounr) {
            return base.Channel.UpdateWinnerResultToPlayerLeaderBoard(idAccounr);
        }
        
        public System.Threading.Tasks.Task<int> UpdateWinnerResultToPlayerLeaderBoardAsync(int idAccounr) {
            return base.Channel.UpdateWinnerResultToPlayerLeaderBoardAsync(idAccounr);
        }
        
        public int UpdateLoserResultToPlayerLeaderBoard(int idAccount) {
            return base.Channel.UpdateLoserResultToPlayerLeaderBoard(idAccount);
        }
        
        public System.Threading.Tasks.Task<int> UpdateLoserResultToPlayerLeaderBoardAsync(int idAccount) {
            return base.Channel.UpdateLoserResultToPlayerLeaderBoardAsync(idAccount);
        }
        
        public int UpdateDrawResultToPlayerLeaderBoard(int idAccount) {
            return base.Channel.UpdateDrawResultToPlayerLeaderBoard(idAccount);
        }
        
        public System.Threading.Tasks.Task<int> UpdateDrawResultToPlayerLeaderBoardAsync(int idAccount) {
            return base.Channel.UpdateDrawResultToPlayerLeaderBoardAsync(idAccount);
        }
        
        public HiveGameService.Contracts.LeaderBoardPlayer GetPersonalLeaderBoard(int idAccount) {
            return base.Channel.GetPersonalLeaderBoard(idAccount);
        }
        
        public System.Threading.Tasks.Task<HiveGameService.Contracts.LeaderBoardPlayer> GetPersonalLeaderBoardAsync(int idAccount) {
            return base.Channel.GetPersonalLeaderBoardAsync(idAccount);
        }
        
        public HiveGameService.Contracts.LeaderBoardPlayer[] GetAllPlayersLeaderboards() {
            return base.Channel.GetAllPlayersLeaderboards();
        }
        
        public System.Threading.Tasks.Task<HiveGameService.Contracts.LeaderBoardPlayer[]> GetAllPlayersLeaderboardsAsync() {
            return base.Channel.GetAllPlayersLeaderboardsAsync();
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="HiveServerProxy.IEmailVerificationManager")]
    public interface IEmailVerificationManager {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmailVerificationManager/SendVerificationEmail", ReplyAction="http://tempuri.org/IEmailVerificationManager/SendVerificationEmailResponse")]
        int SendVerificationEmail(string emailToSend);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmailVerificationManager/SendVerificationEmail", ReplyAction="http://tempuri.org/IEmailVerificationManager/SendVerificationEmailResponse")]
        System.Threading.Tasks.Task<int> SendVerificationEmailAsync(string emailToSend);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmailVerificationManager/VerifyCodeVerification", ReplyAction="http://tempuri.org/IEmailVerificationManager/VerifyCodeVerificationResponse")]
        bool VerifyCodeVerification(HiveGameService.Contracts.UserVerificator userVerificator);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmailVerificationManager/VerifyCodeVerification", ReplyAction="http://tempuri.org/IEmailVerificationManager/VerifyCodeVerificationResponse")]
        System.Threading.Tasks.Task<bool> VerifyCodeVerificationAsync(HiveGameService.Contracts.UserVerificator userVerificator);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmailVerificationManager/GenerateVerificatonCode", ReplyAction="http://tempuri.org/IEmailVerificationManager/GenerateVerificatonCodeResponse")]
        string GenerateVerificatonCode(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmailVerificationManager/GenerateVerificatonCode", ReplyAction="http://tempuri.org/IEmailVerificationManager/GenerateVerificatonCodeResponse")]
        System.Threading.Tasks.Task<string> GenerateVerificatonCodeAsync(string email);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IEmailVerificationManagerChannel : TestServer.HiveServerProxy.IEmailVerificationManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EmailVerificationManagerClient : System.ServiceModel.ClientBase<TestServer.HiveServerProxy.IEmailVerificationManager>, TestServer.HiveServerProxy.IEmailVerificationManager {
        
        public EmailVerificationManagerClient() {
        }
        
        public EmailVerificationManagerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public EmailVerificationManagerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EmailVerificationManagerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EmailVerificationManagerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int SendVerificationEmail(string emailToSend) {
            return base.Channel.SendVerificationEmail(emailToSend);
        }
        
        public System.Threading.Tasks.Task<int> SendVerificationEmailAsync(string emailToSend) {
            return base.Channel.SendVerificationEmailAsync(emailToSend);
        }
        
        public bool VerifyCodeVerification(HiveGameService.Contracts.UserVerificator userVerificator) {
            return base.Channel.VerifyCodeVerification(userVerificator);
        }
        
        public System.Threading.Tasks.Task<bool> VerifyCodeVerificationAsync(HiveGameService.Contracts.UserVerificator userVerificator) {
            return base.Channel.VerifyCodeVerificationAsync(userVerificator);
        }
        
        public string GenerateVerificatonCode(string email) {
            return base.Channel.GenerateVerificatonCode(email);
        }
        
        public System.Threading.Tasks.Task<string> GenerateVerificatonCodeAsync(string email) {
            return base.Channel.GenerateVerificatonCodeAsync(email);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="HiveServerProxy.IEmailInvitationManager")]
    public interface IEmailInvitationManager {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmailInvitationManager/SendEmailInvitation", ReplyAction="http://tempuri.org/IEmailInvitationManager/SendEmailInvitationResponse")]
        int SendEmailInvitation(HiveGameService.Contracts.UserVerificator verificator);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmailInvitationManager/SendEmailInvitation", ReplyAction="http://tempuri.org/IEmailInvitationManager/SendEmailInvitationResponse")]
        System.Threading.Tasks.Task<int> SendEmailInvitationAsync(HiveGameService.Contracts.UserVerificator verificator);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmailInvitationManager/VerifyExistingCode", ReplyAction="http://tempuri.org/IEmailInvitationManager/VerifyExistingCodeResponse")]
        bool VerifyExistingCode(string code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmailInvitationManager/VerifyExistingCode", ReplyAction="http://tempuri.org/IEmailInvitationManager/VerifyExistingCodeResponse")]
        System.Threading.Tasks.Task<bool> VerifyExistingCodeAsync(string code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmailInvitationManager/GenerateLobbyCode", ReplyAction="http://tempuri.org/IEmailInvitationManager/GenerateLobbyCodeResponse")]
        string GenerateLobbyCode(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmailInvitationManager/GenerateLobbyCode", ReplyAction="http://tempuri.org/IEmailInvitationManager/GenerateLobbyCodeResponse")]
        System.Threading.Tasks.Task<string> GenerateLobbyCodeAsync(string email);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IEmailInvitationManagerChannel : TestServer.HiveServerProxy.IEmailInvitationManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EmailInvitationManagerClient : System.ServiceModel.ClientBase<TestServer.HiveServerProxy.IEmailInvitationManager>, TestServer.HiveServerProxy.IEmailInvitationManager {
        
        public EmailInvitationManagerClient() {
        }
        
        public EmailInvitationManagerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public EmailInvitationManagerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EmailInvitationManagerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EmailInvitationManagerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int SendEmailInvitation(HiveGameService.Contracts.UserVerificator verificator) {
            return base.Channel.SendEmailInvitation(verificator);
        }
        
        public System.Threading.Tasks.Task<int> SendEmailInvitationAsync(HiveGameService.Contracts.UserVerificator verificator) {
            return base.Channel.SendEmailInvitationAsync(verificator);
        }
        
        public bool VerifyExistingCode(string code) {
            return base.Channel.VerifyExistingCode(code);
        }
        
        public System.Threading.Tasks.Task<bool> VerifyExistingCodeAsync(string code) {
            return base.Channel.VerifyExistingCodeAsync(code);
        }
        
        public string GenerateLobbyCode(string email) {
            return base.Channel.GenerateLobbyCode(email);
        }
        
        public System.Threading.Tasks.Task<string> GenerateLobbyCodeAsync(string email) {
            return base.Channel.GenerateLobbyCodeAsync(email);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="HiveServerProxy.IUserSessionManager")]
    public interface IUserSessionManager {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserSessionManager/ConnectToGame", ReplyAction="http://tempuri.org/IUserSessionManager/ConnectToGameResponse")]
        int ConnectToGame(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserSessionManager/ConnectToGame", ReplyAction="http://tempuri.org/IUserSessionManager/ConnectToGameResponse")]
        System.Threading.Tasks.Task<int> ConnectToGameAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserSessionManager/Disconnect", ReplyAction="http://tempuri.org/IUserSessionManager/DisconnectResponse")]
        int Disconnect(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserSessionManager/Disconnect", ReplyAction="http://tempuri.org/IUserSessionManager/DisconnectResponse")]
        System.Threading.Tasks.Task<int> DisconnectAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserSessionManager/VerifyConnectivity", ReplyAction="http://tempuri.org/IUserSessionManager/VerifyConnectivityResponse")]
        bool VerifyConnectivity(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserSessionManager/VerifyConnectivity", ReplyAction="http://tempuri.org/IUserSessionManager/VerifyConnectivityResponse")]
        System.Threading.Tasks.Task<bool> VerifyConnectivityAsync(string username);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IUserSessionManagerChannel : TestServer.HiveServerProxy.IUserSessionManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UserSessionManagerClient : System.ServiceModel.ClientBase<TestServer.HiveServerProxy.IUserSessionManager>, TestServer.HiveServerProxy.IUserSessionManager {
        
        public UserSessionManagerClient() {
        }
        
        public UserSessionManagerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public UserSessionManagerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserSessionManagerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserSessionManagerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int ConnectToGame(string username) {
            return base.Channel.ConnectToGame(username);
        }
        
        public System.Threading.Tasks.Task<int> ConnectToGameAsync(string username) {
            return base.Channel.ConnectToGameAsync(username);
        }
        
        public int Disconnect(string username) {
            return base.Channel.Disconnect(username);
        }
        
        public System.Threading.Tasks.Task<int> DisconnectAsync(string username) {
            return base.Channel.DisconnectAsync(username);
        }
        
        public bool VerifyConnectivity(string username) {
            return base.Channel.VerifyConnectivity(username);
        }
        
        public System.Threading.Tasks.Task<bool> VerifyConnectivityAsync(string username) {
            return base.Channel.VerifyConnectivityAsync(username);
        }
    }
}
