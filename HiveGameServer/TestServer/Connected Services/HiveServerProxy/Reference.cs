//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TestServer.HiveServerProxy {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Point", Namespace="http://schemas.datacontract.org/2004/07/System.Windows")]
    [System.SerializableAttribute()]
    public partial struct Point : System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private double _xField;
        
        private double _yField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public double _x {
            get {
                return this._xField;
            }
            set {
                if ((this._xField.Equals(value) != true)) {
                    this._xField = value;
                    this.RaisePropertyChanged("_x");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public double _y {
            get {
                return this._yField;
            }
            set {
                if ((this._yField.Equals(value) != true)) {
                    this._yField = value;
                    this.RaisePropertyChanged("_y");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="HiveServerProxy.IUserManager")]
    public interface IUserManager {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/AddUser", ReplyAction="http://tempuri.org/IUserManager/AddUserResponse")]
        int AddUser(HiveGameService.Contracts.Profile profile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/AddUser", ReplyAction="http://tempuri.org/IUserManager/AddUserResponse")]
        System.Threading.Tasks.Task<int> AddUserAsync(HiveGameService.Contracts.Profile profile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/GetUserProfileByUsername", ReplyAction="http://tempuri.org/IUserManager/GetUserProfileByUsernameResponse")]
        HiveGameService.Contracts.Profile GetUserProfileByUsername(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/GetUserProfileByUsername", ReplyAction="http://tempuri.org/IUserManager/GetUserProfileByUsernameResponse")]
        System.Threading.Tasks.Task<HiveGameService.Contracts.Profile> GetUserProfileByUsernameAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/GetUserProfile", ReplyAction="http://tempuri.org/IUserManager/GetUserProfileResponse")]
        HiveGameService.Contracts.Profile GetUserProfile(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/GetUserProfile", ReplyAction="http://tempuri.org/IUserManager/GetUserProfileResponse")]
        System.Threading.Tasks.Task<HiveGameService.Contracts.Profile> GetUserProfileAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/UpdateLoginCredentials", ReplyAction="http://tempuri.org/IUserManager/UpdateLoginCredentialsResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(HiveGameService.Contracts.Profile))]
        int UpdateLoginCredentials(HiveGameService.Contracts.AccessAccount oldAccessProfile, HiveGameService.Contracts.AccessAccount newAccessProfile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/UpdateLoginCredentials", ReplyAction="http://tempuri.org/IUserManager/UpdateLoginCredentialsResponse")]
        System.Threading.Tasks.Task<int> UpdateLoginCredentialsAsync(HiveGameService.Contracts.AccessAccount oldAccessProfile, HiveGameService.Contracts.AccessAccount newAccessProfile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/UpdatePlusUserReputation", ReplyAction="http://tempuri.org/IUserManager/UpdatePlusUserReputationResponse")]
        int UpdatePlusUserReputation(string username, int reputation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/UpdatePlusUserReputation", ReplyAction="http://tempuri.org/IUserManager/UpdatePlusUserReputationResponse")]
        System.Threading.Tasks.Task<int> UpdatePlusUserReputationAsync(string username, int reputation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/UpdateMinusUserReputation", ReplyAction="http://tempuri.org/IUserManager/UpdateMinusUserReputationResponse")]
        int UpdateMinusUserReputation(string username, int reputation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/UpdateMinusUserReputation", ReplyAction="http://tempuri.org/IUserManager/UpdateMinusUserReputationResponse")]
        System.Threading.Tasks.Task<int> UpdateMinusUserReputationAsync(string username, int reputation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/UpdateProfile", ReplyAction="http://tempuri.org/IUserManager/UpdateProfileResponse")]
        int UpdateProfile(HiveGameService.Contracts.Profile profile, string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/UpdateProfile", ReplyAction="http://tempuri.org/IUserManager/UpdateProfileResponse")]
        System.Threading.Tasks.Task<int> UpdateProfileAsync(HiveGameService.Contracts.Profile profile, string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/VerifyExistingAccesAccount", ReplyAction="http://tempuri.org/IUserManager/VerifyExistingAccesAccountResponse")]
        int VerifyExistingAccesAccount(string email, string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/VerifyExistingAccesAccount", ReplyAction="http://tempuri.org/IUserManager/VerifyExistingAccesAccountResponse")]
        System.Threading.Tasks.Task<int> VerifyExistingAccesAccountAsync(string email, string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/VerifyCredentials", ReplyAction="http://tempuri.org/IUserManager/VerifyCredentialsResponse")]
        int VerifyCredentials(string username, string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/VerifyCredentials", ReplyAction="http://tempuri.org/IUserManager/VerifyCredentialsResponse")]
        System.Threading.Tasks.Task<int> VerifyCredentialsAsync(string username, string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/VerifyPasswordCredentials", ReplyAction="http://tempuri.org/IUserManager/VerifyPasswordCredentialsResponse")]
        int VerifyPasswordCredentials(string email, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/VerifyPasswordCredentials", ReplyAction="http://tempuri.org/IUserManager/VerifyPasswordCredentialsResponse")]
        System.Threading.Tasks.Task<int> VerifyPasswordCredentialsAsync(string email, string password);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IUserManagerChannel : TestServer.HiveServerProxy.IUserManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UserManagerClient : System.ServiceModel.ClientBase<TestServer.HiveServerProxy.IUserManager>, TestServer.HiveServerProxy.IUserManager {
        
        public UserManagerClient() {
        }
        
        public UserManagerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public UserManagerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserManagerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserManagerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int AddUser(HiveGameService.Contracts.Profile profile) {
            return base.Channel.AddUser(profile);
        }
        
        public System.Threading.Tasks.Task<int> AddUserAsync(HiveGameService.Contracts.Profile profile) {
            return base.Channel.AddUserAsync(profile);
        }
        
        public HiveGameService.Contracts.Profile GetUserProfileByUsername(string username) {
            return base.Channel.GetUserProfileByUsername(username);
        }
        
        public System.Threading.Tasks.Task<HiveGameService.Contracts.Profile> GetUserProfileByUsernameAsync(string username) {
            return base.Channel.GetUserProfileByUsernameAsync(username);
        }
        
        public HiveGameService.Contracts.Profile GetUserProfile(string username, string password) {
            return base.Channel.GetUserProfile(username, password);
        }
        
        public System.Threading.Tasks.Task<HiveGameService.Contracts.Profile> GetUserProfileAsync(string username, string password) {
            return base.Channel.GetUserProfileAsync(username, password);
        }
        
        public int UpdateLoginCredentials(HiveGameService.Contracts.AccessAccount oldAccessProfile, HiveGameService.Contracts.AccessAccount newAccessProfile) {
            return base.Channel.UpdateLoginCredentials(oldAccessProfile, newAccessProfile);
        }
        
        public System.Threading.Tasks.Task<int> UpdateLoginCredentialsAsync(HiveGameService.Contracts.AccessAccount oldAccessProfile, HiveGameService.Contracts.AccessAccount newAccessProfile) {
            return base.Channel.UpdateLoginCredentialsAsync(oldAccessProfile, newAccessProfile);
        }
        
        public int UpdatePlusUserReputation(string username, int reputation) {
            return base.Channel.UpdatePlusUserReputation(username, reputation);
        }
        
        public System.Threading.Tasks.Task<int> UpdatePlusUserReputationAsync(string username, int reputation) {
            return base.Channel.UpdatePlusUserReputationAsync(username, reputation);
        }
        
        public int UpdateMinusUserReputation(string username, int reputation) {
            return base.Channel.UpdateMinusUserReputation(username, reputation);
        }
        
        public System.Threading.Tasks.Task<int> UpdateMinusUserReputationAsync(string username, int reputation) {
            return base.Channel.UpdateMinusUserReputationAsync(username, reputation);
        }
        
        public int UpdateProfile(HiveGameService.Contracts.Profile profile, string email) {
            return base.Channel.UpdateProfile(profile, email);
        }
        
        public System.Threading.Tasks.Task<int> UpdateProfileAsync(HiveGameService.Contracts.Profile profile, string email) {
            return base.Channel.UpdateProfileAsync(profile, email);
        }
        
        public int VerifyExistingAccesAccount(string email, string username) {
            return base.Channel.VerifyExistingAccesAccount(email, username);
        }
        
        public System.Threading.Tasks.Task<int> VerifyExistingAccesAccountAsync(string email, string username) {
            return base.Channel.VerifyExistingAccesAccountAsync(email, username);
        }
        
        public int VerifyCredentials(string username, string email) {
            return base.Channel.VerifyCredentials(username, email);
        }
        
        public System.Threading.Tasks.Task<int> VerifyCredentialsAsync(string username, string email) {
            return base.Channel.VerifyCredentialsAsync(username, email);
        }
        
        public int VerifyPasswordCredentials(string email, string password) {
            return base.Channel.VerifyPasswordCredentials(email, password);
        }
        
        public System.Threading.Tasks.Task<int> VerifyPasswordCredentialsAsync(string email, string password) {
            return base.Channel.VerifyPasswordCredentialsAsync(email, password);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="HiveServerProxy.IFriendshipManager")]
    public interface IFriendshipManager {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendshipManager/DeleteFriend", ReplyAction="http://tempuri.org/IFriendshipManager/DeleteFriendResponse")]
        int DeleteFriend(HiveGameService.Contracts.Profile removingPlayer, HiveGameService.Contracts.Profile friendToRemove);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendshipManager/DeleteFriend", ReplyAction="http://tempuri.org/IFriendshipManager/DeleteFriendResponse")]
        System.Threading.Tasks.Task<int> DeleteFriendAsync(HiveGameService.Contracts.Profile removingPlayer, HiveGameService.Contracts.Profile friendToRemove);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendshipManager/GetAllFriends", ReplyAction="http://tempuri.org/IFriendshipManager/GetAllFriendsResponse")]
        HiveGameService.Contracts.Profile[] GetAllFriends(HiveGameService.Contracts.Profile player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendshipManager/GetAllFriends", ReplyAction="http://tempuri.org/IFriendshipManager/GetAllFriendsResponse")]
        System.Threading.Tasks.Task<HiveGameService.Contracts.Profile[]> GetAllFriendsAsync(HiveGameService.Contracts.Profile player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendshipManager/GetFriendByUsername", ReplyAction="http://tempuri.org/IFriendshipManager/GetFriendByUsernameResponse")]
        HiveGameService.Contracts.Profile GetFriendByUsername(HiveGameService.Contracts.Profile player, string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendshipManager/GetFriendByUsername", ReplyAction="http://tempuri.org/IFriendshipManager/GetFriendByUsernameResponse")]
        System.Threading.Tasks.Task<HiveGameService.Contracts.Profile> GetFriendByUsernameAsync(HiveGameService.Contracts.Profile player, string username);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFriendshipManagerChannel : TestServer.HiveServerProxy.IFriendshipManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FriendshipManagerClient : System.ServiceModel.ClientBase<TestServer.HiveServerProxy.IFriendshipManager>, TestServer.HiveServerProxy.IFriendshipManager {
        
        public FriendshipManagerClient() {
        }
        
        public FriendshipManagerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public FriendshipManagerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FriendshipManagerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FriendshipManagerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int DeleteFriend(HiveGameService.Contracts.Profile removingPlayer, HiveGameService.Contracts.Profile friendToRemove) {
            return base.Channel.DeleteFriend(removingPlayer, friendToRemove);
        }
        
        public System.Threading.Tasks.Task<int> DeleteFriendAsync(HiveGameService.Contracts.Profile removingPlayer, HiveGameService.Contracts.Profile friendToRemove) {
            return base.Channel.DeleteFriendAsync(removingPlayer, friendToRemove);
        }
        
        public HiveGameService.Contracts.Profile[] GetAllFriends(HiveGameService.Contracts.Profile player) {
            return base.Channel.GetAllFriends(player);
        }
        
        public System.Threading.Tasks.Task<HiveGameService.Contracts.Profile[]> GetAllFriendsAsync(HiveGameService.Contracts.Profile player) {
            return base.Channel.GetAllFriendsAsync(player);
        }
        
        public HiveGameService.Contracts.Profile GetFriendByUsername(HiveGameService.Contracts.Profile player, string username) {
            return base.Channel.GetFriendByUsername(player, username);
        }
        
        public System.Threading.Tasks.Task<HiveGameService.Contracts.Profile> GetFriendByUsernameAsync(HiveGameService.Contracts.Profile player, string username) {
            return base.Channel.GetFriendByUsernameAsync(player, username);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="HiveServerProxy.IFriendRequestManager")]
    public interface IFriendRequestManager {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendRequestManager/CreateFriendRequest", ReplyAction="http://tempuri.org/IFriendRequestManager/CreateFriendRequestResponse")]
        int CreateFriendRequest(HiveGameService.Contracts.Profile playerOne, HiveGameService.Contracts.Profile playerTwo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendRequestManager/CreateFriendRequest", ReplyAction="http://tempuri.org/IFriendRequestManager/CreateFriendRequestResponse")]
        System.Threading.Tasks.Task<int> CreateFriendRequestAsync(HiveGameService.Contracts.Profile playerOne, HiveGameService.Contracts.Profile playerTwo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendRequestManager/GetFriendRequests", ReplyAction="http://tempuri.org/IFriendRequestManager/GetFriendRequestsResponse")]
        HiveGameService.Contracts.Profile[] GetFriendRequests(HiveGameService.Contracts.Profile player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendRequestManager/GetFriendRequests", ReplyAction="http://tempuri.org/IFriendRequestManager/GetFriendRequestsResponse")]
        System.Threading.Tasks.Task<HiveGameService.Contracts.Profile[]> GetFriendRequestsAsync(HiveGameService.Contracts.Profile player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendRequestManager/AcceptFriendRequest", ReplyAction="http://tempuri.org/IFriendRequestManager/AcceptFriendRequestResponse")]
        int AcceptFriendRequest(HiveGameService.Contracts.Profile playerOne, HiveGameService.Contracts.Profile playerTwo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendRequestManager/AcceptFriendRequest", ReplyAction="http://tempuri.org/IFriendRequestManager/AcceptFriendRequestResponse")]
        System.Threading.Tasks.Task<int> AcceptFriendRequestAsync(HiveGameService.Contracts.Profile playerOne, HiveGameService.Contracts.Profile playerTwo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendRequestManager/DeclineFriendRequest", ReplyAction="http://tempuri.org/IFriendRequestManager/DeclineFriendRequestResponse")]
        int DeclineFriendRequest(HiveGameService.Contracts.Profile playerOne, HiveGameService.Contracts.Profile playerTwo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendRequestManager/DeclineFriendRequest", ReplyAction="http://tempuri.org/IFriendRequestManager/DeclineFriendRequestResponse")]
        System.Threading.Tasks.Task<int> DeclineFriendRequestAsync(HiveGameService.Contracts.Profile playerOne, HiveGameService.Contracts.Profile playerTwo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendRequestManager/VerifyFriendRequestRegistered", ReplyAction="http://tempuri.org/IFriendRequestManager/VerifyFriendRequestRegisteredResponse")]
        int VerifyFriendRequestRegistered(HiveGameService.Contracts.Profile playerOne, HiveGameService.Contracts.Profile playerTwo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendRequestManager/VerifyFriendRequestRegistered", ReplyAction="http://tempuri.org/IFriendRequestManager/VerifyFriendRequestRegisteredResponse")]
        System.Threading.Tasks.Task<int> VerifyFriendRequestRegisteredAsync(HiveGameService.Contracts.Profile playerOne, HiveGameService.Contracts.Profile playerTwo);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFriendRequestManagerChannel : TestServer.HiveServerProxy.IFriendRequestManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FriendRequestManagerClient : System.ServiceModel.ClientBase<TestServer.HiveServerProxy.IFriendRequestManager>, TestServer.HiveServerProxy.IFriendRequestManager {
        
        public FriendRequestManagerClient() {
        }
        
        public FriendRequestManagerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public FriendRequestManagerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FriendRequestManagerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FriendRequestManagerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int CreateFriendRequest(HiveGameService.Contracts.Profile playerOne, HiveGameService.Contracts.Profile playerTwo) {
            return base.Channel.CreateFriendRequest(playerOne, playerTwo);
        }
        
        public System.Threading.Tasks.Task<int> CreateFriendRequestAsync(HiveGameService.Contracts.Profile playerOne, HiveGameService.Contracts.Profile playerTwo) {
            return base.Channel.CreateFriendRequestAsync(playerOne, playerTwo);
        }
        
        public HiveGameService.Contracts.Profile[] GetFriendRequests(HiveGameService.Contracts.Profile player) {
            return base.Channel.GetFriendRequests(player);
        }
        
        public System.Threading.Tasks.Task<HiveGameService.Contracts.Profile[]> GetFriendRequestsAsync(HiveGameService.Contracts.Profile player) {
            return base.Channel.GetFriendRequestsAsync(player);
        }
        
        public int AcceptFriendRequest(HiveGameService.Contracts.Profile playerOne, HiveGameService.Contracts.Profile playerTwo) {
            return base.Channel.AcceptFriendRequest(playerOne, playerTwo);
        }
        
        public System.Threading.Tasks.Task<int> AcceptFriendRequestAsync(HiveGameService.Contracts.Profile playerOne, HiveGameService.Contracts.Profile playerTwo) {
            return base.Channel.AcceptFriendRequestAsync(playerOne, playerTwo);
        }
        
        public int DeclineFriendRequest(HiveGameService.Contracts.Profile playerOne, HiveGameService.Contracts.Profile playerTwo) {
            return base.Channel.DeclineFriendRequest(playerOne, playerTwo);
        }
        
        public System.Threading.Tasks.Task<int> DeclineFriendRequestAsync(HiveGameService.Contracts.Profile playerOne, HiveGameService.Contracts.Profile playerTwo) {
            return base.Channel.DeclineFriendRequestAsync(playerOne, playerTwo);
        }
        
        public int VerifyFriendRequestRegistered(HiveGameService.Contracts.Profile playerOne, HiveGameService.Contracts.Profile playerTwo) {
            return base.Channel.VerifyFriendRequestRegistered(playerOne, playerTwo);
        }
        
        public System.Threading.Tasks.Task<int> VerifyFriendRequestRegisteredAsync(HiveGameService.Contracts.Profile playerOne, HiveGameService.Contracts.Profile playerTwo) {
            return base.Channel.VerifyFriendRequestRegisteredAsync(playerOne, playerTwo);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="HiveServerProxy.IChatManager", CallbackContract=typeof(TestServer.HiveServerProxy.IChatManagerCallback))]
    public interface IChatManager {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatManager/ConnectToChatLobby")]
        void ConnectToChatLobby(HiveGameService.Contracts.Profile user, string code);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatManager/ConnectToChatLobby")]
        System.Threading.Tasks.Task ConnectToChatLobbyAsync(HiveGameService.Contracts.Profile user, string code);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatManager/SendMessages")]
        void SendMessages(HiveGameService.Contracts.Message message, string code);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatManager/SendMessages")]
        System.Threading.Tasks.Task SendMessagesAsync(HiveGameService.Contracts.Message message, string code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatManager/DisconectPlayerFromChat", ReplyAction="http://tempuri.org/IChatManager/DisconectPlayerFromChatResponse")]
        int DisconectPlayerFromChat(HiveGameService.Contracts.Profile user, string code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatManager/DisconectPlayerFromChat", ReplyAction="http://tempuri.org/IChatManager/DisconectPlayerFromChatResponse")]
        System.Threading.Tasks.Task<int> DisconectPlayerFromChatAsync(HiveGameService.Contracts.Profile user, string code);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IChatManagerCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatManager/ReceiveMessage", ReplyAction="http://tempuri.org/IChatManager/ReceiveMessageResponse")]
        void ReceiveMessage(HiveGameService.Contracts.Message[] messages);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IChatManagerChannel : TestServer.HiveServerProxy.IChatManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ChatManagerClient : System.ServiceModel.DuplexClientBase<TestServer.HiveServerProxy.IChatManager>, TestServer.HiveServerProxy.IChatManager {
        
        public ChatManagerClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ChatManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ChatManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ChatManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ChatManagerClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void ConnectToChatLobby(HiveGameService.Contracts.Profile user, string code) {
            base.Channel.ConnectToChatLobby(user, code);
        }
        
        public System.Threading.Tasks.Task ConnectToChatLobbyAsync(HiveGameService.Contracts.Profile user, string code) {
            return base.Channel.ConnectToChatLobbyAsync(user, code);
        }
        
        public void SendMessages(HiveGameService.Contracts.Message message, string code) {
            base.Channel.SendMessages(message, code);
        }
        
        public System.Threading.Tasks.Task SendMessagesAsync(HiveGameService.Contracts.Message message, string code) {
            return base.Channel.SendMessagesAsync(message, code);
        }
        
        public int DisconectPlayerFromChat(HiveGameService.Contracts.Profile user, string code) {
            return base.Channel.DisconectPlayerFromChat(user, code);
        }
        
        public System.Threading.Tasks.Task<int> DisconectPlayerFromChatAsync(HiveGameService.Contracts.Profile user, string code) {
            return base.Channel.DisconectPlayerFromChatAsync(user, code);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="HiveServerProxy.ILeaderBoardManager")]
    public interface ILeaderBoardManager {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILeaderBoardManager/UpdateWinnerResultToPlayerLeaderBoard", ReplyAction="http://tempuri.org/ILeaderBoardManager/UpdateWinnerResultToPlayerLeaderBoardRespo" +
            "nse")]
        int UpdateWinnerResultToPlayerLeaderBoard(int idAccounr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILeaderBoardManager/UpdateWinnerResultToPlayerLeaderBoard", ReplyAction="http://tempuri.org/ILeaderBoardManager/UpdateWinnerResultToPlayerLeaderBoardRespo" +
            "nse")]
        System.Threading.Tasks.Task<int> UpdateWinnerResultToPlayerLeaderBoardAsync(int idAccounr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILeaderBoardManager/UpdateLoserResultToPlayerLeaderBoard", ReplyAction="http://tempuri.org/ILeaderBoardManager/UpdateLoserResultToPlayerLeaderBoardRespon" +
            "se")]
        int UpdateLoserResultToPlayerLeaderBoard(int idAccount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILeaderBoardManager/UpdateLoserResultToPlayerLeaderBoard", ReplyAction="http://tempuri.org/ILeaderBoardManager/UpdateLoserResultToPlayerLeaderBoardRespon" +
            "se")]
        System.Threading.Tasks.Task<int> UpdateLoserResultToPlayerLeaderBoardAsync(int idAccount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILeaderBoardManager/UpdateDrawResultToPlayerLeaderBoard", ReplyAction="http://tempuri.org/ILeaderBoardManager/UpdateDrawResultToPlayerLeaderBoardRespons" +
            "e")]
        int UpdateDrawResultToPlayerLeaderBoard(int idAccount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILeaderBoardManager/UpdateDrawResultToPlayerLeaderBoard", ReplyAction="http://tempuri.org/ILeaderBoardManager/UpdateDrawResultToPlayerLeaderBoardRespons" +
            "e")]
        System.Threading.Tasks.Task<int> UpdateDrawResultToPlayerLeaderBoardAsync(int idAccount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILeaderBoardManager/GetPersonalLeaderBoard", ReplyAction="http://tempuri.org/ILeaderBoardManager/GetPersonalLeaderBoardResponse")]
        HiveGameService.Contracts.LeaderBoardPlayer GetPersonalLeaderBoard(int idAccount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILeaderBoardManager/GetPersonalLeaderBoard", ReplyAction="http://tempuri.org/ILeaderBoardManager/GetPersonalLeaderBoardResponse")]
        System.Threading.Tasks.Task<HiveGameService.Contracts.LeaderBoardPlayer> GetPersonalLeaderBoardAsync(int idAccount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILeaderBoardManager/GetAllPlayersLeaderboards", ReplyAction="http://tempuri.org/ILeaderBoardManager/GetAllPlayersLeaderboardsResponse")]
        HiveGameService.Contracts.LeaderBoardPlayer[] GetAllPlayersLeaderboards();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILeaderBoardManager/GetAllPlayersLeaderboards", ReplyAction="http://tempuri.org/ILeaderBoardManager/GetAllPlayersLeaderboardsResponse")]
        System.Threading.Tasks.Task<HiveGameService.Contracts.LeaderBoardPlayer[]> GetAllPlayersLeaderboardsAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILeaderBoardManagerChannel : TestServer.HiveServerProxy.ILeaderBoardManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LeaderBoardManagerClient : System.ServiceModel.ClientBase<TestServer.HiveServerProxy.ILeaderBoardManager>, TestServer.HiveServerProxy.ILeaderBoardManager {
        
        public LeaderBoardManagerClient() {
        }
        
        public LeaderBoardManagerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public LeaderBoardManagerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LeaderBoardManagerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LeaderBoardManagerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int UpdateWinnerResultToPlayerLeaderBoard(int idAccounr) {
            return base.Channel.UpdateWinnerResultToPlayerLeaderBoard(idAccounr);
        }
        
        public System.Threading.Tasks.Task<int> UpdateWinnerResultToPlayerLeaderBoardAsync(int idAccounr) {
            return base.Channel.UpdateWinnerResultToPlayerLeaderBoardAsync(idAccounr);
        }
        
        public int UpdateLoserResultToPlayerLeaderBoard(int idAccount) {
            return base.Channel.UpdateLoserResultToPlayerLeaderBoard(idAccount);
        }
        
        public System.Threading.Tasks.Task<int> UpdateLoserResultToPlayerLeaderBoardAsync(int idAccount) {
            return base.Channel.UpdateLoserResultToPlayerLeaderBoardAsync(idAccount);
        }
        
        public int UpdateDrawResultToPlayerLeaderBoard(int idAccount) {
            return base.Channel.UpdateDrawResultToPlayerLeaderBoard(idAccount);
        }
        
        public System.Threading.Tasks.Task<int> UpdateDrawResultToPlayerLeaderBoardAsync(int idAccount) {
            return base.Channel.UpdateDrawResultToPlayerLeaderBoardAsync(idAccount);
        }
        
        public HiveGameService.Contracts.LeaderBoardPlayer GetPersonalLeaderBoard(int idAccount) {
            return base.Channel.GetPersonalLeaderBoard(idAccount);
        }
        
        public System.Threading.Tasks.Task<HiveGameService.Contracts.LeaderBoardPlayer> GetPersonalLeaderBoardAsync(int idAccount) {
            return base.Channel.GetPersonalLeaderBoardAsync(idAccount);
        }
        
        public HiveGameService.Contracts.LeaderBoardPlayer[] GetAllPlayersLeaderboards() {
            return base.Channel.GetAllPlayersLeaderboards();
        }
        
        public System.Threading.Tasks.Task<HiveGameService.Contracts.LeaderBoardPlayer[]> GetAllPlayersLeaderboardsAsync() {
            return base.Channel.GetAllPlayersLeaderboardsAsync();
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="HiveServerProxy.IEmailVerificationManager")]
    public interface IEmailVerificationManager {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmailVerificationManager/SendVerificationEmail", ReplyAction="http://tempuri.org/IEmailVerificationManager/SendVerificationEmailResponse")]
        int SendVerificationEmail(string emailToSend);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmailVerificationManager/SendVerificationEmail", ReplyAction="http://tempuri.org/IEmailVerificationManager/SendVerificationEmailResponse")]
        System.Threading.Tasks.Task<int> SendVerificationEmailAsync(string emailToSend);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmailVerificationManager/VerifyCodeVerification", ReplyAction="http://tempuri.org/IEmailVerificationManager/VerifyCodeVerificationResponse")]
        bool VerifyCodeVerification(HiveGameService.Contracts.UserVerificator userVerificator);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmailVerificationManager/VerifyCodeVerification", ReplyAction="http://tempuri.org/IEmailVerificationManager/VerifyCodeVerificationResponse")]
        System.Threading.Tasks.Task<bool> VerifyCodeVerificationAsync(HiveGameService.Contracts.UserVerificator userVerificator);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmailVerificationManager/GenerateVerificatonCode", ReplyAction="http://tempuri.org/IEmailVerificationManager/GenerateVerificatonCodeResponse")]
        string GenerateVerificatonCode(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmailVerificationManager/GenerateVerificatonCode", ReplyAction="http://tempuri.org/IEmailVerificationManager/GenerateVerificatonCodeResponse")]
        System.Threading.Tasks.Task<string> GenerateVerificatonCodeAsync(string email);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IEmailVerificationManagerChannel : TestServer.HiveServerProxy.IEmailVerificationManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EmailVerificationManagerClient : System.ServiceModel.ClientBase<TestServer.HiveServerProxy.IEmailVerificationManager>, TestServer.HiveServerProxy.IEmailVerificationManager {
        
        public EmailVerificationManagerClient() {
        }
        
        public EmailVerificationManagerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public EmailVerificationManagerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EmailVerificationManagerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EmailVerificationManagerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int SendVerificationEmail(string emailToSend) {
            return base.Channel.SendVerificationEmail(emailToSend);
        }
        
        public System.Threading.Tasks.Task<int> SendVerificationEmailAsync(string emailToSend) {
            return base.Channel.SendVerificationEmailAsync(emailToSend);
        }
        
        public bool VerifyCodeVerification(HiveGameService.Contracts.UserVerificator userVerificator) {
            return base.Channel.VerifyCodeVerification(userVerificator);
        }
        
        public System.Threading.Tasks.Task<bool> VerifyCodeVerificationAsync(HiveGameService.Contracts.UserVerificator userVerificator) {
            return base.Channel.VerifyCodeVerificationAsync(userVerificator);
        }
        
        public string GenerateVerificatonCode(string email) {
            return base.Channel.GenerateVerificatonCode(email);
        }
        
        public System.Threading.Tasks.Task<string> GenerateVerificatonCodeAsync(string email) {
            return base.Channel.GenerateVerificatonCodeAsync(email);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="HiveServerProxy.IEmailInvitationManager")]
    public interface IEmailInvitationManager {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmailInvitationManager/SendEmailInvitation", ReplyAction="http://tempuri.org/IEmailInvitationManager/SendEmailInvitationResponse")]
        int SendEmailInvitation(HiveGameService.Contracts.UserVerificator verificator);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmailInvitationManager/SendEmailInvitation", ReplyAction="http://tempuri.org/IEmailInvitationManager/SendEmailInvitationResponse")]
        System.Threading.Tasks.Task<int> SendEmailInvitationAsync(HiveGameService.Contracts.UserVerificator verificator);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IEmailInvitationManagerChannel : TestServer.HiveServerProxy.IEmailInvitationManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EmailInvitationManagerClient : System.ServiceModel.ClientBase<TestServer.HiveServerProxy.IEmailInvitationManager>, TestServer.HiveServerProxy.IEmailInvitationManager {
        
        public EmailInvitationManagerClient() {
        }
        
        public EmailInvitationManagerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public EmailInvitationManagerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EmailInvitationManagerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EmailInvitationManagerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int SendEmailInvitation(HiveGameService.Contracts.UserVerificator verificator) {
            return base.Channel.SendEmailInvitation(verificator);
        }
        
        public System.Threading.Tasks.Task<int> SendEmailInvitationAsync(HiveGameService.Contracts.UserVerificator verificator) {
            return base.Channel.SendEmailInvitationAsync(verificator);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="HiveServerProxy.IUserSessionManager")]
    public interface IUserSessionManager {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserSessionManager/ConnectToGame", ReplyAction="http://tempuri.org/IUserSessionManager/ConnectToGameResponse")]
        int ConnectToGame(HiveGameService.Contracts.UserSession user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserSessionManager/ConnectToGame", ReplyAction="http://tempuri.org/IUserSessionManager/ConnectToGameResponse")]
        System.Threading.Tasks.Task<int> ConnectToGameAsync(HiveGameService.Contracts.UserSession user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserSessionManager/Disconnect", ReplyAction="http://tempuri.org/IUserSessionManager/DisconnectResponse")]
        int Disconnect(HiveGameService.Contracts.UserSession user, bool isInMatch);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserSessionManager/Disconnect", ReplyAction="http://tempuri.org/IUserSessionManager/DisconnectResponse")]
        System.Threading.Tasks.Task<int> DisconnectAsync(HiveGameService.Contracts.UserSession user, bool isInMatch);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserSessionManager/VerifyConnectivity", ReplyAction="http://tempuri.org/IUserSessionManager/VerifyConnectivityResponse")]
        bool VerifyConnectivity(HiveGameService.Contracts.UserSession user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserSessionManager/VerifyConnectivity", ReplyAction="http://tempuri.org/IUserSessionManager/VerifyConnectivityResponse")]
        System.Threading.Tasks.Task<bool> VerifyConnectivityAsync(HiveGameService.Contracts.UserSession user);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IUserSessionManagerChannel : TestServer.HiveServerProxy.IUserSessionManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UserSessionManagerClient : System.ServiceModel.ClientBase<TestServer.HiveServerProxy.IUserSessionManager>, TestServer.HiveServerProxy.IUserSessionManager {
        
        public UserSessionManagerClient() {
        }
        
        public UserSessionManagerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public UserSessionManagerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserSessionManagerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserSessionManagerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int ConnectToGame(HiveGameService.Contracts.UserSession user) {
            return base.Channel.ConnectToGame(user);
        }
        
        public System.Threading.Tasks.Task<int> ConnectToGameAsync(HiveGameService.Contracts.UserSession user) {
            return base.Channel.ConnectToGameAsync(user);
        }
        
        public int Disconnect(HiveGameService.Contracts.UserSession user, bool isInMatch) {
            return base.Channel.Disconnect(user, isInMatch);
        }
        
        public System.Threading.Tasks.Task<int> DisconnectAsync(HiveGameService.Contracts.UserSession user, bool isInMatch) {
            return base.Channel.DisconnectAsync(user, isInMatch);
        }
        
        public bool VerifyConnectivity(HiveGameService.Contracts.UserSession user) {
            return base.Channel.VerifyConnectivity(user);
        }
        
        public System.Threading.Tasks.Task<bool> VerifyConnectivityAsync(HiveGameService.Contracts.UserSession user) {
            return base.Channel.VerifyConnectivityAsync(user);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="HiveServerProxy.IMatchCreatorManager")]
    public interface IMatchCreatorManager {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMatchCreatorManager/CreateMatch", ReplyAction="http://tempuri.org/IMatchCreatorManager/CreateMatchResponse")]
        int CreateMatch(HiveGameService.Contracts.MatchCreator matchCreator);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMatchCreatorManager/CreateMatch", ReplyAction="http://tempuri.org/IMatchCreatorManager/CreateMatchResponse")]
        System.Threading.Tasks.Task<int> CreateMatchAsync(HiveGameService.Contracts.MatchCreator matchCreator);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMatchCreatorManager/UpdateMatchState", ReplyAction="http://tempuri.org/IMatchCreatorManager/UpdateMatchStateResponse")]
        int UpdateMatchState(HiveGameService.Contracts.MatchCreator matchCreator);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMatchCreatorManager/UpdateMatchState", ReplyAction="http://tempuri.org/IMatchCreatorManager/UpdateMatchStateResponse")]
        System.Threading.Tasks.Task<int> UpdateMatchStateAsync(HiveGameService.Contracts.MatchCreator matchCreator);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMatchCreatorManager/VerifyExistingActiveMatch", ReplyAction="http://tempuri.org/IMatchCreatorManager/VerifyExistingActiveMatchResponse")]
        int VerifyExistingActiveMatch(HiveGameService.Contracts.MatchCreator matchCreator);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMatchCreatorManager/VerifyExistingActiveMatch", ReplyAction="http://tempuri.org/IMatchCreatorManager/VerifyExistingActiveMatchResponse")]
        System.Threading.Tasks.Task<int> VerifyExistingActiveMatchAsync(HiveGameService.Contracts.MatchCreator matchCreator);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMatchCreatorManager/VerifyIfLobbyIsFull", ReplyAction="http://tempuri.org/IMatchCreatorManager/VerifyIfLobbyIsFullResponse")]
        bool VerifyIfLobbyIsFull(string codeLobby);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMatchCreatorManager/VerifyIfLobbyIsFull", ReplyAction="http://tempuri.org/IMatchCreatorManager/VerifyIfLobbyIsFullResponse")]
        System.Threading.Tasks.Task<bool> VerifyIfLobbyIsFullAsync(string codeLobby);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMatchCreatorManager/VerifyExistingCode", ReplyAction="http://tempuri.org/IMatchCreatorManager/VerifyExistingCodeResponse")]
        bool VerifyExistingCode(string code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMatchCreatorManager/VerifyExistingCode", ReplyAction="http://tempuri.org/IMatchCreatorManager/VerifyExistingCodeResponse")]
        System.Threading.Tasks.Task<bool> VerifyExistingCodeAsync(string code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMatchCreatorManager/GenerateLobbyCode", ReplyAction="http://tempuri.org/IMatchCreatorManager/GenerateLobbyCodeResponse")]
        string GenerateLobbyCode(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMatchCreatorManager/GenerateLobbyCode", ReplyAction="http://tempuri.org/IMatchCreatorManager/GenerateLobbyCodeResponse")]
        System.Threading.Tasks.Task<string> GenerateLobbyCodeAsync(string email);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMatchCreatorManagerChannel : TestServer.HiveServerProxy.IMatchCreatorManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MatchCreatorManagerClient : System.ServiceModel.ClientBase<TestServer.HiveServerProxy.IMatchCreatorManager>, TestServer.HiveServerProxy.IMatchCreatorManager {
        
        public MatchCreatorManagerClient() {
        }
        
        public MatchCreatorManagerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MatchCreatorManagerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MatchCreatorManagerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MatchCreatorManagerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int CreateMatch(HiveGameService.Contracts.MatchCreator matchCreator) {
            return base.Channel.CreateMatch(matchCreator);
        }
        
        public System.Threading.Tasks.Task<int> CreateMatchAsync(HiveGameService.Contracts.MatchCreator matchCreator) {
            return base.Channel.CreateMatchAsync(matchCreator);
        }
        
        public int UpdateMatchState(HiveGameService.Contracts.MatchCreator matchCreator) {
            return base.Channel.UpdateMatchState(matchCreator);
        }
        
        public System.Threading.Tasks.Task<int> UpdateMatchStateAsync(HiveGameService.Contracts.MatchCreator matchCreator) {
            return base.Channel.UpdateMatchStateAsync(matchCreator);
        }
        
        public int VerifyExistingActiveMatch(HiveGameService.Contracts.MatchCreator matchCreator) {
            return base.Channel.VerifyExistingActiveMatch(matchCreator);
        }
        
        public System.Threading.Tasks.Task<int> VerifyExistingActiveMatchAsync(HiveGameService.Contracts.MatchCreator matchCreator) {
            return base.Channel.VerifyExistingActiveMatchAsync(matchCreator);
        }
        
        public bool VerifyIfLobbyIsFull(string codeLobby) {
            return base.Channel.VerifyIfLobbyIsFull(codeLobby);
        }
        
        public System.Threading.Tasks.Task<bool> VerifyIfLobbyIsFullAsync(string codeLobby) {
            return base.Channel.VerifyIfLobbyIsFullAsync(codeLobby);
        }
        
        public bool VerifyExistingCode(string code) {
            return base.Channel.VerifyExistingCode(code);
        }
        
        public System.Threading.Tasks.Task<bool> VerifyExistingCodeAsync(string code) {
            return base.Channel.VerifyExistingCodeAsync(code);
        }
        
        public string GenerateLobbyCode(string email) {
            return base.Channel.GenerateLobbyCode(email);
        }
        
        public System.Threading.Tasks.Task<string> GenerateLobbyCodeAsync(string email) {
            return base.Channel.GenerateLobbyCodeAsync(email);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="HiveServerProxy.IFriendsManager", CallbackContract=typeof(TestServer.HiveServerProxy.IFriendsManagerCallback))]
    public interface IFriendsManager {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IFriendsManager/GetFriendsList")]
        void GetFriendsList(HiveGameService.Contracts.UserSession user);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IFriendsManager/GetFriendsList")]
        System.Threading.Tasks.Task GetFriendsListAsync(HiveGameService.Contracts.UserSession user);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IFriendsManager/JoinAsConnectedFriend")]
        void JoinAsConnectedFriend(HiveGameService.Contracts.UserSession user);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IFriendsManager/JoinAsConnectedFriend")]
        System.Threading.Tasks.Task JoinAsConnectedFriendAsync(HiveGameService.Contracts.UserSession user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendsManager/DeleteUserAsConnectedFriend", ReplyAction="http://tempuri.org/IFriendsManager/DeleteUserAsConnectedFriendResponse")]
        int DeleteUserAsConnectedFriend(HiveGameService.Contracts.UserSession user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendsManager/DeleteUserAsConnectedFriend", ReplyAction="http://tempuri.org/IFriendsManager/DeleteUserAsConnectedFriendResponse")]
        System.Threading.Tasks.Task<int> DeleteUserAsConnectedFriendAsync(HiveGameService.Contracts.UserSession user);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFriendsManagerCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendsManager/ObtainConnectedFriends", ReplyAction="http://tempuri.org/IFriendsManager/ObtainConnectedFriendsResponse")]
        void ObtainConnectedFriends(HiveGameService.Contracts.UserSession[] connectedFriends);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFriendsManagerChannel : TestServer.HiveServerProxy.IFriendsManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FriendsManagerClient : System.ServiceModel.DuplexClientBase<TestServer.HiveServerProxy.IFriendsManager>, TestServer.HiveServerProxy.IFriendsManager {
        
        public FriendsManagerClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public FriendsManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public FriendsManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public FriendsManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public FriendsManagerClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void GetFriendsList(HiveGameService.Contracts.UserSession user) {
            base.Channel.GetFriendsList(user);
        }
        
        public System.Threading.Tasks.Task GetFriendsListAsync(HiveGameService.Contracts.UserSession user) {
            return base.Channel.GetFriendsListAsync(user);
        }
        
        public void JoinAsConnectedFriend(HiveGameService.Contracts.UserSession user) {
            base.Channel.JoinAsConnectedFriend(user);
        }
        
        public System.Threading.Tasks.Task JoinAsConnectedFriendAsync(HiveGameService.Contracts.UserSession user) {
            return base.Channel.JoinAsConnectedFriendAsync(user);
        }
        
        public int DeleteUserAsConnectedFriend(HiveGameService.Contracts.UserSession user) {
            return base.Channel.DeleteUserAsConnectedFriend(user);
        }
        
        public System.Threading.Tasks.Task<int> DeleteUserAsConnectedFriendAsync(HiveGameService.Contracts.UserSession user) {
            return base.Channel.DeleteUserAsConnectedFriendAsync(user);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="HiveServerProxy.ILobbyManager", CallbackContract=typeof(TestServer.HiveServerProxy.ILobbyManagerCallback))]
    public interface ILobbyManager {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyManager/ConnectToLobby")]
        void ConnectToLobby(HiveGameService.Contracts.UserSession lobbyPlayer, string codeLobby);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyManager/ConnectToLobby")]
        System.Threading.Tasks.Task ConnectToLobbyAsync(HiveGameService.Contracts.UserSession lobbyPlayer, string codeLobby);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyManager/LeavePlayerFromLobby")]
        void LeavePlayerFromLobby(HiveGameService.Contracts.UserSession lobbyPlayer, string codeLobby, bool isKicked);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyManager/LeavePlayerFromLobby")]
        System.Threading.Tasks.Task LeavePlayerFromLobbyAsync(HiveGameService.Contracts.UserSession lobbyPlayer, string codeLobby, bool isKicked);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyManager/StartMatch")]
        void StartMatch(string code);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyManager/StartMatch")]
        System.Threading.Tasks.Task StartMatchAsync(string code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILobbyManager/VerifyCreatorOfTheMatch", ReplyAction="http://tempuri.org/ILobbyManager/VerifyCreatorOfTheMatchResponse")]
        int VerifyCreatorOfTheMatch(HiveGameService.Contracts.GameMatch match);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILobbyManager/VerifyCreatorOfTheMatch", ReplyAction="http://tempuri.org/ILobbyManager/VerifyCreatorOfTheMatchResponse")]
        System.Threading.Tasks.Task<int> VerifyCreatorOfTheMatchAsync(HiveGameService.Contracts.GameMatch match);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILobbyManagerCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILobbyManager/ReceivePlayersToLobby", ReplyAction="http://tempuri.org/ILobbyManager/ReceivePlayersToLobbyResponse")]
        void ReceivePlayersToLobby(HiveGameService.Contracts.UserSession[] user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILobbyManager/ReceiveKickedNotification", ReplyAction="http://tempuri.org/ILobbyManager/ReceiveKickedNotificationResponse")]
        void ReceiveKickedNotification();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILobbyManager/ReceiveStartMatchNotification", ReplyAction="http://tempuri.org/ILobbyManager/ReceiveStartMatchNotificationResponse")]
        void ReceiveStartMatchNotification();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILobbyManagerChannel : TestServer.HiveServerProxy.ILobbyManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LobbyManagerClient : System.ServiceModel.DuplexClientBase<TestServer.HiveServerProxy.ILobbyManager>, TestServer.HiveServerProxy.ILobbyManager {
        
        public LobbyManagerClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public LobbyManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public LobbyManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public LobbyManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public LobbyManagerClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void ConnectToLobby(HiveGameService.Contracts.UserSession lobbyPlayer, string codeLobby) {
            base.Channel.ConnectToLobby(lobbyPlayer, codeLobby);
        }
        
        public System.Threading.Tasks.Task ConnectToLobbyAsync(HiveGameService.Contracts.UserSession lobbyPlayer, string codeLobby) {
            return base.Channel.ConnectToLobbyAsync(lobbyPlayer, codeLobby);
        }
        
        public void LeavePlayerFromLobby(HiveGameService.Contracts.UserSession lobbyPlayer, string codeLobby, bool isKicked) {
            base.Channel.LeavePlayerFromLobby(lobbyPlayer, codeLobby, isKicked);
        }
        
        public System.Threading.Tasks.Task LeavePlayerFromLobbyAsync(HiveGameService.Contracts.UserSession lobbyPlayer, string codeLobby, bool isKicked) {
            return base.Channel.LeavePlayerFromLobbyAsync(lobbyPlayer, codeLobby, isKicked);
        }
        
        public void StartMatch(string code) {
            base.Channel.StartMatch(code);
        }
        
        public System.Threading.Tasks.Task StartMatchAsync(string code) {
            return base.Channel.StartMatchAsync(code);
        }
        
        public int VerifyCreatorOfTheMatch(HiveGameService.Contracts.GameMatch match) {
            return base.Channel.VerifyCreatorOfTheMatch(match);
        }
        
        public System.Threading.Tasks.Task<int> VerifyCreatorOfTheMatchAsync(HiveGameService.Contracts.GameMatch match) {
            return base.Channel.VerifyCreatorOfTheMatchAsync(match);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="HiveServerProxy.IGameManager", CallbackContract=typeof(TestServer.HiveServerProxy.IGameManagerCallback))]
    public interface IGameManager {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameManager/ConnectToGameBoard")]
        void ConnectToGameBoard(HiveGameService.Contracts.UserSession session, string codeMatch);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameManager/ConnectToGameBoard")]
        System.Threading.Tasks.Task ConnectToGameBoardAsync(HiveGameService.Contracts.UserSession session, string codeMatch);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameManager/FinishOfTheMatch")]
        void FinishOfTheMatch(string codeMatch, string winner);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameManager/FinishOfTheMatch")]
        System.Threading.Tasks.Task FinishOfTheMatchAsync(string codeMatch, string winner);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameManager/MovePiece")]
        void MovePiece(HiveGameService.Contracts.GamePice piece, HiveGameService.Contracts.UserSession session, string codeMatch);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameManager/MovePiece")]
        System.Threading.Tasks.Task MovePieceAsync(HiveGameService.Contracts.GamePice piece, HiveGameService.Contracts.UserSession session, string codeMatch);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameManager/SetTurns")]
        void SetTurns(HiveGameService.Contracts.UserSession session, string codeMatch);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameManager/SetTurns")]
        System.Threading.Tasks.Task SetTurnsAsync(HiveGameService.Contracts.UserSession session, string codeMatch);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameManager/LeaveTheGame")]
        void LeaveTheGame(HiveGameService.Contracts.UserSession session, string codeMatch);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameManager/LeaveTheGame")]
        System.Threading.Tasks.Task LeaveTheGameAsync(HiveGameService.Contracts.UserSession session, string codeMatch);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameManager/LeaveMatchFinished", ReplyAction="http://tempuri.org/IGameManager/LeaveMatchFinishedResponse")]
        int LeaveMatchFinished(string codeMatch, HiveGameService.Contracts.UserSession session);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameManager/LeaveMatchFinished", ReplyAction="http://tempuri.org/IGameManager/LeaveMatchFinishedResponse")]
        System.Threading.Tasks.Task<int> LeaveMatchFinishedAsync(string codeMatch, HiveGameService.Contracts.UserSession session);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameManager/CheckConnection", ReplyAction="http://tempuri.org/IGameManager/CheckConnectionResponse")]
        bool CheckConnection(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameManager/CheckConnection", ReplyAction="http://tempuri.org/IGameManager/CheckConnectionResponse")]
        System.Threading.Tasks.Task<bool> CheckConnectionAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameManager/CheckPersonalConnection", ReplyAction="http://tempuri.org/IGameManager/CheckPersonalConnectionResponse")]
        bool CheckPersonalConnection();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameManager/CheckPersonalConnection", ReplyAction="http://tempuri.org/IGameManager/CheckPersonalConnectionResponse")]
        System.Threading.Tasks.Task<bool> CheckPersonalConnectionAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGameManagerCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameManager/ChargePlayerGameBoard", ReplyAction="http://tempuri.org/IGameManager/ChargePlayerGameBoardResponse")]
        void ChargePlayerGameBoard(HiveGameService.Contracts.PlayerSide side);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameManager/ReceivePieceMoved", ReplyAction="http://tempuri.org/IGameManager/ReceivePieceMovedResponse")]
        void ReceivePieceMoved(HiveGameService.Contracts.GamePice piece);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameManager/ReceiveTurns", ReplyAction="http://tempuri.org/IGameManager/ReceiveTurnsResponse")]
        void ReceiveTurns(bool isTurn);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameManager/ReceivePlayersToMatch", ReplyAction="http://tempuri.org/IGameManager/ReceivePlayersToMatchResponse")]
        void ReceivePlayersToMatch(HiveGameService.Contracts.UserSession[] userSession);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameManager/ReceivePlayerHasLeftNotification", ReplyAction="http://tempuri.org/IGameManager/ReceivePlayerHasLeftNotificationResponse")]
        void ReceivePlayerHasLeftNotification(bool doPlayerLeftTheGame);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameManager/ReceiveFinalMatchResult", ReplyAction="http://tempuri.org/IGameManager/ReceiveFinalMatchResultResponse")]
        void ReceiveFinalMatchResult(string winner);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameManager/PlayerDisconnected", ReplyAction="http://tempuri.org/IGameManager/PlayerDisconnectedResponse")]
        void PlayerDisconnected(string disconnectedUsername);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameManager/RecieveRequestPingFromOtherPlayer", ReplyAction="http://tempuri.org/IGameManager/RecieveRequestPingFromOtherPlayerResponse")]
        void RecieveRequestPingFromOtherPlayer();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGameManagerChannel : TestServer.HiveServerProxy.IGameManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GameManagerClient : System.ServiceModel.DuplexClientBase<TestServer.HiveServerProxy.IGameManager>, TestServer.HiveServerProxy.IGameManager {
        
        public GameManagerClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public GameManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public GameManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public GameManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public GameManagerClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void ConnectToGameBoard(HiveGameService.Contracts.UserSession session, string codeMatch) {
            base.Channel.ConnectToGameBoard(session, codeMatch);
        }
        
        public System.Threading.Tasks.Task ConnectToGameBoardAsync(HiveGameService.Contracts.UserSession session, string codeMatch) {
            return base.Channel.ConnectToGameBoardAsync(session, codeMatch);
        }
        
        public void FinishOfTheMatch(string codeMatch, string winner) {
            base.Channel.FinishOfTheMatch(codeMatch, winner);
        }
        
        public System.Threading.Tasks.Task FinishOfTheMatchAsync(string codeMatch, string winner) {
            return base.Channel.FinishOfTheMatchAsync(codeMatch, winner);
        }
        
        public void MovePiece(HiveGameService.Contracts.GamePice piece, HiveGameService.Contracts.UserSession session, string codeMatch) {
            base.Channel.MovePiece(piece, session, codeMatch);
        }
        
        public System.Threading.Tasks.Task MovePieceAsync(HiveGameService.Contracts.GamePice piece, HiveGameService.Contracts.UserSession session, string codeMatch) {
            return base.Channel.MovePieceAsync(piece, session, codeMatch);
        }
        
        public void SetTurns(HiveGameService.Contracts.UserSession session, string codeMatch) {
            base.Channel.SetTurns(session, codeMatch);
        }
        
        public System.Threading.Tasks.Task SetTurnsAsync(HiveGameService.Contracts.UserSession session, string codeMatch) {
            return base.Channel.SetTurnsAsync(session, codeMatch);
        }
        
        public void LeaveTheGame(HiveGameService.Contracts.UserSession session, string codeMatch) {
            base.Channel.LeaveTheGame(session, codeMatch);
        }
        
        public System.Threading.Tasks.Task LeaveTheGameAsync(HiveGameService.Contracts.UserSession session, string codeMatch) {
            return base.Channel.LeaveTheGameAsync(session, codeMatch);
        }
        
        public int LeaveMatchFinished(string codeMatch, HiveGameService.Contracts.UserSession session) {
            return base.Channel.LeaveMatchFinished(codeMatch, session);
        }
        
        public System.Threading.Tasks.Task<int> LeaveMatchFinishedAsync(string codeMatch, HiveGameService.Contracts.UserSession session) {
            return base.Channel.LeaveMatchFinishedAsync(codeMatch, session);
        }
        
        public bool CheckConnection(string username) {
            return base.Channel.CheckConnection(username);
        }
        
        public System.Threading.Tasks.Task<bool> CheckConnectionAsync(string username) {
            return base.Channel.CheckConnectionAsync(username);
        }
        
        public bool CheckPersonalConnection() {
            return base.Channel.CheckPersonalConnection();
        }
        
        public System.Threading.Tasks.Task<bool> CheckPersonalConnectionAsync() {
            return base.Channel.CheckPersonalConnectionAsync();
        }
    }
}
